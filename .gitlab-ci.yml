variables:
    GIT_SUBMODULE_STRATEGY: recursive
    GET_SOURCES_ATTEMPTS: 5
    GIT_STRATEGY: fetch

before_script:
    - module load common

stages:
    - build_ux600
    - build_ux600fd
    - run_ux600
    - run_ux600fd

cache:
    paths:
        - buildroot/dl

## Job template for build linux sdk
.build_linux_sdk_template: &build_linux_sdk_job_def
    only:
        changes:
          - conf/*
          - Makefile
          - .gitlab-ci.yml
          - buildroot
          - freeloader
          - linux
          - u-boot
    artifacts:
        name: "bootimages-${CORE}-${BOOT_MODE}-${CI_COMMIT_SHA::8}"
        paths:
            - work/boot.zip
            - work/opensbi/platform/nuclei/generic/firmware/*.elf
            - freeloader/freeloader.elf
            - build_*.log.*
        expire_in: 2 day
    tags:
        - env::native
        - host::xls01
    script:
        - echo ">>Show help message for $CORE - $BOOT_MODE"
        - make help
        - echo ">>Build buildroot_initramfs_sysroot for $CORE"
        - |
            make -j buildroot_initramfs_sysroot > >(tee build_sysroot.log |grep '>>>') || {
                echo 'Show last 200 lines of build log'
                tail -n 200 build_sysroot.log
                xz -f -z build_sysroot.log
                exit 1
            }
        - xz -f -z build_sysroot.log
        - echo ">>Build freeloader for $CORE - $BOOT_MODE"
        - |
            make freeloader > >(tee build_freeloader.log) || {
                xz -f -z build_freeloader.log
                exit 1
            }
        - xz -f -z build_freeloader.log
        - echo ">>Build and generate boot images for $CORE - $BOOT_MODE"
        - |
            make preboot && make -j bootimages > >(tee build_bootimages.log) || {
                xz -f -z build_bootimages.log
                exit 1
            }
        - xz -f -z build_bootimages.log
        - echo ">>Build simulation target for $CORE - $BOOT_MODE"
        - |
            make presim && make -j opensbi_sim > >(tee build_opensbi_payload.log) || {
                xz -f -z build_opensbi_payload.log
                exit 1
            }
        - xz -f -z build_opensbi_payload.log

## Job template for run linux in xlspike
.run_linux_sdk_template: &run_linux_sdk_job_def
    only:
        changes:
          - conf/*
          - Makefile
          - .gitlab-ci.yml
          - buildroot
          - freeloader
          - linux
          - u-boot
    tags:
        - env::native
        - host::xls01
    script:
        - echo ">>Run using xlspike for $CORE - $BOOT_MODE"
        - |
            timeout --foreground -s SIGKILL 8m xl_spike work/opensbi/platform/nuclei/generic/firmware/fw_payload.elf > >(tee run_xlspike.log) || {
                if cat run_xlspike.log | grep "Run /init" ; then echo "Kernel boot successfully" ; else echo "Kernel boot failed" && exit 1; fi; 
                if cat run_xlspike.log | grep "Welcome to" ; then echo "Pass simulation" && exit 0; else echo "Failed init process" && exit 1; fi; 
            }

## Job for build sdk
# Build For UX600 Core, without FPU, flash boot mode
build_ux600_flash:
    stage: build_ux600
    variables:
        CORE: "ux600"
        BOOT_MODE: "flash"
    <<: *build_linux_sdk_job_def

## Job for build sdk
# Build For UX600 Core, without FPU, sd boot mode
build_ux600_sd:
    stage: build_ux600
    variables:
        CORE: "ux600"
        BOOT_MODE: "sd"
    <<: *build_linux_sdk_job_def


## Job for run sim
# Run For UX600 Core, without FPU, flash boot mode
run_ux600_flash:
    stage: run_ux600
    dependencies:
        - build_ux600_flash
    variables:
        CORE: "ux600"
        BOOT_MODE: "flash"
    <<: *run_linux_sdk_job_def

## Job for run sim
# Run For UX600 Core, without FPU, sd boot mode
run_ux600_sd:
    stage: run_ux600
    dependencies:
        - build_ux600_sd
    variables:
        CORE: "ux600"
        BOOT_MODE: "sd"
    <<: *run_linux_sdk_job_def


## Job for build sdk
# Build For UX600FD Core, with FPU, flash boot mode
build_ux600fd_flash:
    stage: build_ux600fd
    variables:
        CORE: "ux600fd"
        BOOT_MODE: "flash"
    <<: *build_linux_sdk_job_def

## Job for build sdk
# Build For UX600FD Core, with FPU, sd boot mode
build_ux600fd_sd:
    stage: build_ux600fd
    variables:
        CORE: "ux600fd"
        BOOT_MODE: "sd"
    <<: *build_linux_sdk_job_def

## Job for run sim
# Run For UX600FD Core, with FPU, flash boot mode
# This ux600fd init process will fail
run_ux600fd_flash:
    stage: run_ux600fd
    allow_failure: true
    dependencies:
        - build_ux600fd_flash
    variables:
        CORE: "ux600fd"
        BOOT_MODE: "flash"
    <<: *run_linux_sdk_job_def

## Job for run sim
# Run For UX600FD Core, with FPU, sd boot mode
# This ux600fd init process will fail
run_ux600fd_sd:
    stage: run_ux600fd
    allow_failure: true
    dependencies:
        - build_ux600fd_sd
    variables:
        CORE: "ux600fd"
        BOOT_MODE: "sd"
    <<: *run_linux_sdk_job_def