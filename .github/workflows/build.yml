# This is a basic workflow to help you get started with Actions

name: Build

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the dev_nuclei_next branch
on:
  push:
    branches: [ dev* ]
    paths-ignore:
    - README.md
    - LICENSE
    - .gitlab-ci.yml
    - .gitignore
  pull_request:
    branches: [ dev_nuclei_next ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    name: build for ${{ matrix.core }} - ${{ matrix.boot_mode }}
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        core: [ux600, ux600fd]
        boot_mode: [sd, flash]

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout Linux SDK Code
        uses: actions/checkout@v2
        with:
          submodules: recursive
 
      - name: Tarball source
        run: |
          base=$(basename $PWD)
          cd ..
          tar czvf source.tar.gz --exclude-vcs -C $base .
          mv source.tar.gz $base/

      - name: Upload source
        if: matrix.core == 'ux600' && matrix.boot_mode == 'sd'
        uses: actions/upload-artifact@v2.2.0
        with:
          name: nuclei_linux_sdk_source
          path: source.tar.gz
        # continue build on error
        continue-on-error: true

      - name: Caching packages
        uses: actions/cache@v2
        with:
          path: buildroot/dl
          key: build 

      # Install dependendenc
      - name: Install dependencies
        run: |
          sudo apt-get install build-essential git autotools-dev cmake texinfo bison minicom flex liblz4-tool \
            libgmp-dev libmpfr-dev libmpc-dev gawk libz-dev libssl-dev device-tree-compiler libncursesw5-dev libncursesw5 \
            python3 python3-pip mtools
          sudo pip3 install git-archive-all

      # Build Freeloader
      - name: Build freeloader for ${{ matrix.core }} - ${{ matrix.boot_mode }}
        run: |
          make CORE=${{ matrix.core }} BOOT_MODE=${{ matrix.boot_mode }} freeloader

      # Build bootimages
      - name: Build bootimages for ${{ matrix.core }} - ${{ matrix.boot_mode }}
        run: |
          echo "Generate boot images"
          make CORE=${{ matrix.core }} BOOT_MODE=${{ matrix.boot_mode }} bootimages
          echo "Generate QEMU Disk"
          echo ">>> Apply workaround: change TIMERCLK_FREQ from 32768 to 1000000"
          sed -i "s/32768/1000000/" conf/demosoc/*.dts
          make CORE=${{ matrix.core }} BOOT_MODE=${{ matrix.boot_mode }} DISK_SIZE=128 gendisk
          RUNQEMUSH=work/demosoc/run_qemu.sh
          echo "qemu-system-riscv64 -M nuclei_u,download=flashxip -smp 8 -m 256M -bios freeloader/freeloader.elf -nographic -drive file=disk.img,if=sd,format=raw" > $RUNQEMUSH
          chmod +x $RUNQEMUSH
      
      - name: Upload bootimages for ${{ matrix.core }} - ${{ matrix.boot_mode }}
        uses: actions/upload-artifact@v2.2.0
        with:
          name: bootimages_${{ matrix.core }}_${{ matrix.boot_mode }}
          path: |
            work/demosoc/boot.zip
            work/demosoc/freeloader/freeloader.elf

      - name: Upload qemu images for ${{ matrix.core }} - ${{ matrix.boot_mode }}
        uses: actions/upload-artifact@v2.2.0
        with:
          name: qemu_images_${{ matrix.core }}_${{ matrix.boot_mode }}
          path: |
            work/demosoc/boot.zip
            work/demosoc/freeloader/freeloader.elf
            work/demosoc/disk.img
            work/demosoc/run_qemu.sh

      - name: Upload cached packages
        if: matrix.core == 'ux600' && matrix.boot_mode == 'sd'
        uses: actions/upload-artifact@v2.2.0
        with:
          name: build_caching
          path: |
            buildroot/dl
